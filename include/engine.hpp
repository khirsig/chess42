/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   engine.hpp                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: khirsig <khirsig@student.42.fr>            +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2022/07/05 11:20:38 by khirsig           #+#    #+#             */
/*   Updated: 2022/07/19 15:52:06 by khirsig          ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef ENGINE_HPP
# define ENGINE_HPP

# define DEPTH 5

# include <algorithm>
# include <thread>

static const float kingFieldValues[8][8] = {
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, 0.0 },
	{ -1.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, -1.0 },
	{ -2.0, -3.0, -3.0, -4.0, -4.0, -3.0, -3.0, -2.0 },
	{ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0 },
	{ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0 },
	{ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0 },
	{ -3.0, -4.0, -4.0, -5.0, -5.0, -4.0, -4.0, -3.0 }
};
static const float queenFieldValues[8][8] = {
	{ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0 },
	{ -1.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, -1.0 },
	{ -1.0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0 },
	{ 0.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5 },
	{ -0.5, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -0.5 },
	{ -1.0, 0.0, 0.5, 0.5, 0.5, 0.5, 0.0, -1.0 },
	{ -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0 },
	{ -2.0, -1.0, -1.0, -0.5, -0.5, -1.0, -1.0, -2.0 }
};
static const float rookFieldValues[8][8] = {
	{ 0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0 },
	{ -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5 },
	{ -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5 },
	{ -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5 },
	{ -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5 },
	{ -0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5 },
	{ 0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5 },
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }
};
static const float bishopFieldValues[8][8] = {
	{ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0 },
	{ -1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0 },
	{ -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0 },
	{ -1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0 },
	{ -1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0 },
	{ -1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0 },
	{ -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0 },
	{ -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0 }
};
static const float knightFieldValues[8][8] = {
	{ -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0 },
	{ -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0 },
	{ -3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0 },
	{ -3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0 },
	{ -3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0 },
	{ -3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0 },
	{ -4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0 },
	{ -5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0 }
};
static const float pawnFieldValues[8][8] = {
	{ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 },
	{ 0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5 },
	{ 0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5 },
	{ 0.0, 0.0, 0.0, 3.0, 3.0, 0.0, 0.0, 0.0 },
	{ 0.5, 0.5, 1.0, 3.5, 3.5, 1.0, 0.5, 0.5 },
	{ 1.0, 1.0, 2.0, 3.5, 3.5, 2.0, 1.0, 1.0 },
	{ 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0 },
	{ 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0, 90.0 }
};

class Move {
	public:
		Move(const Move &other)
			: _startX(other._startX),
			  _startY(other._startY),
			  _targetX(other._targetX),
			  _targetY(other._targetY),
			  _evaluatedPoints(other._evaluatedPoints) { }
		Move(int sX, int sY, int tX, int tY, float eP)
			: _startX(sX),
			  _startY(sY),
			  _targetX(tX),
			  _targetY(tY),
			  _evaluatedPoints(eP) { }

		void	setEvalPoints(float newEval) { _evaluatedPoints = newEval; }

		int		getStartX() const { return (_startX); }
		int		getStartY() const { return (_startY); }
		int		getTargetX() const { return (_targetX); }
		int		getTargetY() const { return (_targetY); }
		float	getEvalPoints() const { return (_evaluatedPoints); }
	private:
		float	_evaluatedPoints;
		int	_startX;
		int	_startY;
		int	_targetX;
		int	_targetY;
};


#endif